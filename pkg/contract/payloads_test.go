package contract

import (
	"bytes"
	"reflect"
	"testing"
)

func TestS2CEnemyDuelEmojiMessageMarshal(t *testing.T) {
	msg := &S2CEnemyDuelEmojiMessage{
		PlayerID:   "123",
		EmojiGroup: "some_group",
		EmojiID:    "some_id",
	}
	expectedPayload := []byte{0x0, 0x3, 0x31, 0x32, 0x33, 0x0, 0xa, 0x73, 0x6f, 0x6d, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x0, 0x7, 0x73, 0x6f, 0x6d, 0x65, 0x5f, 0x69, 0x64}

	payload, err := msg.Marshal()
	if err != nil {
		t.Fatalf("S2CEnemyDuelEmojiMessageMarshal failed: %v", err)
	}

	if !bytes.Equal(expectedPayload, payload) {
		t.Errorf("payload mismatch: \ngot: %#v\nwant: %#v", payload, expectedPayload)
	}
}

func TestReadContent(t *testing.T) {
	packet := []byte{0x0, 0x0, 0x0, 0x29, 0x0, 0x0, 0x0, 0xdf, 0x0, 0x12, 0x65, 0x6d, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x65, 0x6c, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x0, 0x13, 0x64, 0x75, 0x65, 0x6c, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x77, 0x72, 0x6f, 0x6e, 0x67, 0x65, 0x64}
	expectedContent := &C2SEnemyDuelEmojiMessage{EmojiGroup: "emticon_duel_basic", EmojiID: "duel_battle_wronged"}

	reader := bytes.NewReader(packet)

	content, err := ReadContent(reader)

	if err != nil {
		t.Fatalf("ReadContent failed: %v", err)
	}

	if !reflect.DeepEqual(expectedContent, content) {
		t.Errorf("content mismatch: \ngot: %#v\nwant: %#v", content, expectedContent)
	}
}

func TestWriteContent(t *testing.T) {
	content := &S2CEnemyDuelEmojiMessage{
		PlayerID:   "123456",
		EmojiGroup: "emoji_group",
		EmojiID:    "emoji_id",
	}
	expectedPacket := []byte{0x0, 0x0, 0x0, 0x1f, 0x0, 0x0, 0x0, 0xe0, 0x0, 0x6, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x0, 0xb, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x0, 0x8, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x5f, 0x69, 0x64}

	var outputBuffer bytes.Buffer

	err := WriteContent(&outputBuffer, content)
	if err != nil {
		t.Fatalf("WriteContent failed: %v", err)
	}

	packet := outputBuffer.Bytes()
	if !bytes.Equal(expectedPacket, packet) {
		t.Errorf("packet mismatch: \ngot: %#v\nwant: %#v", packet, expectedPacket)
	}
}
